{"version":3,"sources":["hooks/useTodoState.js","hooks/useFilterState.js","components/Molecules/Forms/TextForm.js","components/Molecules/Forms/RadioForm.js","components/Organisms/TodoForm.js","components/Molecules/ListRow.js","components/Organisms/TodoList.js","components/Atoms/CheckBox.js","components/Molecules/Forms/CheckBoxForm.js","components/Atoms/Expansion.js","components/Organisms/FilterArea.js","components/App.js","serviceWorker.js","index.js"],"names":["useTodoState","init","_useState","useState","_useState2","Object","slicedToArray","todos","saveTodos","addTodo","todo","newTodos","id","Date","now","toString","Math","floor","random","title","priority","deadline","state","created_at","concat","toConsumableArray","deleteTodo","todoId","filter","changeTodoState","map","objectSpread","filterTodos","filters","every","_ref","_ref2","key","useFilterState","fromEntries","entries","setFilter","handleFilter","prev","defineProperty","TextForm","React","memo","props","react_default","a","createElement","TextField_default","required","autoFocus","label","placeholder","fullWidth","margin","variant","InputLabelProps","shrink","onChange","e","value","prevProps","nextProps","RadioForm","Fragment","FormControl_default","component","FormLabel_default","legend","RadioGroup_default","aria-label","name","row","labels","FormControlLabel_default","control","Radio_default","color","labelPlacement","TodoForm","formInitial","setTodo","onSubmit","preventDefault","Grid_default","container","direction","justify","alignItems","item","xs","Forms_TextForm","persist","target","md","Forms_RadioForm","deadlineLabels","priorityLabels","Button_default","type","ListRow","ListItem_default","divider","button","onClick","onRowClick","ListItemIcon_default","leftIcon","ListItemText_default","inset","primary","primaryText","secondary","secondaryText","ListItemSecondaryAction_default","secondaryAction","getDate","timestamp","_d","m","getMonth","slice","d","H","getHours","i","getMinutes","TodoList","isCompleted","Check_default","NewReleases_default","CheckBoxOutlineBlank_default","periodString","start","end","today","tomorrow","week","other","doneStyle","textDecoration","List_default","Divider_default","Molecules_ListRow","style","IconButton_default","Delete_default","CheckBox","Checkbox_default","checked","CheckBoxForm","Atoms_CheckBox","labelText","defaultProps","Expansion","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","children","withWidth","todoKeys","some","todoKey","length","Forms_CheckBoxForm","filterKey","handleFileters","width","Atoms_Expansion","App","stateLabels","incomplete","complete","high","medium","_useTodoState","_useFilterState","stateFilter","handleStateFileter","_useFilterState2","deadlineFilter","handleDeadlineFileter","_useFilterState3","priorityFilter","handlePriorityFileter","Organisms_TodoForm","Organisms_FilterArea","Organisms_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d505c5c9.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst id = () => Date.now().toString(16) + (Math.floor(10000) * Math.random()).toString(16);\n\nconst useTodoState = (init) => {\n    const [todos, saveTodos] = useState(init);\n\n    return {\n        todos,\n        addTodo: (todo) => {\n            const newTodos = [{ id: id(), title: todo.title, priority: todo.priority, deadline: todo.deadline, state: 'incomplete', created_at: Date.now() }, ...todos];\n            saveTodos(newTodos);\n        },\n        deleteTodo: (todoId) => {\n            const newTodos = todos.filter(todo => todo.id !== todoId);\n            saveTodos(newTodos);\n        },\n        changeTodoState: (todoId) => {\n            const newTodos = todos.map(todo => todo.id === todoId ? { ...todo, state: todo.state === 'complete' ? 'incomplete' : 'complete' } : todo);\n            saveTodos(newTodos);\n        },\n        filterTodos: filters => todos.filter(todo => filters.every(([key, filter]) => filter[todo[key]]))\n    }\n};\n\nexport default useTodoState;","import { useState } from 'react';\n\n// init: {key1: string, key2: string}\nconst useFilterState = (init) => {\n    // filter: {key1: bool, key2: bool}\n    const [filter, setFilter] = useState(() => Object.fromEntries(Object.entries(init).map(([key, val]) => [key, true])));\n    return {\n        filter,\n        handleFilter: key => setFilter(prev => ({ ...prev, [key]: !prev[key] })),\n    }\n};\n\nexport default useFilterState;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextField from '@material-ui/core/TextField';\n\nconst TextForm = React.memo((props) => {\n    return (\n        <TextField\n            required\n            autoFocus\n            label={props.label}\n            placeholder={props.placeholder}\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            InputLabelProps={{\n                shrink: true,\n            }}\n            onChange={e => props.onChange(e)}\n            value={props.value}\n        />\n    );\n}, (prevProps, nextProps) => {\n    return prevProps.value === nextProps.value;\n});\n\nTextForm.propTypes = {\n    label: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n};\n\nexport default TextForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst RadioForm = React.memo((props) => {\n    return (\n        <>\n            <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">{props.legend}</FormLabel>\n                <RadioGroup\n                    aria-label={props.legend}\n                    name={props.legend}\n                    value={props.value}\n                    onChange={(e) => props.onChange(e)}\n                    row\n                >\n                    {props.labels.map(([value, label]) => (\n                        <FormControlLabel\n                            key={value}\n                            value={value}\n                            control={<Radio color=\"primary\" />}\n                            label={label}\n                            labelPlacement=\"end\"\n                        />\n                    ))}\n                </RadioGroup>\n            </FormControl>\n        </>\n    );\n}, (prevProps, nextProps) => {\n    return prevProps.value === nextProps.value;\n});\n\nRadioForm.propTypes = {\n    legend: PropTypes.string.isRequired,\n    labels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)).isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default RadioForm;","import React, { useState } from 'react';\n\nimport TextForm from '../Molecules/Forms/TextForm';\nimport RadioForm from '../Molecules/Forms/RadioForm';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nconst TodoForm = (props) => {\n\n\n    const [todo, setTodo] = useState(props.formInitial);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        props.onSubmit(todo);\n        setTodo({ ...todo, title: '' });\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item xs={12}>\n                    <TextForm\n                        label={props.label}\n                        placeholder={props.placeholder}\n                        onChange={e => { e.persist(); setTodo(todo => ({ ...todo, title: e.target.value })) }}\n                        value={todo.title}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <RadioForm\n                        legend=\"期限\"\n                        labels={Object.entries(props.deadlineLabels)}\n                        value={todo.deadline}\n                        onChange={e => setTodo(todo => ({ ...todo, deadline: e.target.value }))}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <RadioForm\n                        legend=\"優先度\"\n                        labels={Object.entries(props.priorityLabels)}\n                        value={todo.priority}\n                        onChange={e => setTodo(todo => ({ ...todo, priority: e.target.value }))}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Button fullWidth variant=\"contained\" color=\"primary\" type=\"submit\">add</Button>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n\nexport default TodoForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nconst ListRow = (props) => {\n    return (\n        <>\n            <ListItem\n                divider button\n                onClick={props.onRowClick}\n            >\n                <ListItemIcon>\n                    {props.leftIcon}\n                </ListItemIcon>\n                <ListItemText\n                    inset={true}\n                    primary={props.primaryText}\n                    secondary={props.secondaryText}\n                />\n                <ListItemSecondaryAction>\n                    {props.secondaryAction}\n                </ListItemSecondaryAction>\n            </ListItem>\n        </>\n    );\n};\n\nListRow.propTypes = {\n    onRowClick: PropTypes.func.isRequired,\n    leftIcon: PropTypes.element.isRequired,\n    primaryText: PropTypes.element.isRequired,\n    secondaryText: PropTypes.string.isRequired,\n    secondaryAction: PropTypes.any.isRequired,\n};\n\nexport default ListRow;","import React from 'react';\n\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport HighIcon from '@material-ui/icons/NewReleases';\nimport MediumIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckIcon from '@material-ui/icons/Check';\n\nimport ListRow from '../Molecules/ListRow';\n\nconst getDate = (timestamp) => {\n    const _d = new Date(timestamp);\n    // const Y = _d.getFullYear();\n    const m = (\"0\" + (_d.getMonth() + 1)).slice(-2);\n    const d = (\"0\" + _d.getDate()).slice(-2);\n    const H = (\"0\" + _d.getHours()).slice(-2);\n    const i = (\"0\" + _d.getMinutes()).slice(-2);\n    // const s = (\"0\" + _d.getSeconds()).slice(-2);\n    return `${m}/${d} ${H}:${i}`;\n    // return `${Y}/${m}/${d} ${H}:${i}:${s}`;\n}\n\nconst TodoList = (props) => {\n\n    const isCompleted = todo => todo.state === 'complete';\n\n    const leftIcon = todo => isCompleted(todo) ? <CheckIcon /> : todo.priority === 'high' ? <HighIcon color=\"secondary\" /> : <MediumIcon />;\n\n    const periodString = todo => {\n        const start = getDate(todo.created_at);\n        const intervalDays = { \"today\": 1, \"tomorrow\": 2, week: 7, other: 0, };\n        const end = getDate(todo.created_at + intervalDays[todo.deadline] * 24 * 60 * 60 * 1000);\n        return `${start}~${end}`\n    }\n\n    const doneStyle = {\n        color: \"gray\",\n        textDecoration: \"line-through\"\n    }\n\n    return (\n        <List>\n            <Divider />\n            {props.todos.map(todo => (\n                <ListRow\n                    key={todo.id}\n                    onRowClick={() => props.changeTodoState(todo.id)}\n                    leftIcon={leftIcon(todo)}\n                    primaryText={<span style={isCompleted(todo) ? doneStyle : {}}>{todo.title}</span>}\n                    secondaryText={periodString(todo)}\n                    secondaryAction={isCompleted(todo) &&\n                        <IconButton onClick={() => props.deleteTodo(todo.id)}>\n                            <DeleteIcon />\n                        </IconButton>\n                    }\n                />\n            ))}\n        </List>\n    );\n};\n\nexport default TodoList;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst CheckBox = React.memo((props) => {\n    return (\n        <FormControlLabel\n            control={\n                <Checkbox\n                    color=\"primary\"\n                    checked={props.checked}\n                    onChange={props.onChange}\n                    value={props.value}\n                />\n            }\n            label={props.label}\n        />\n    );\n}, (prevProps, nextProps) => {\n    return prevProps.checked === nextProps.checked && prevProps.label === nextProps.label;\n});\n\n\nCheckBox.propTypes = {\n    checked: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n};\n\nexport default CheckBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckBox from '../../Atoms/CheckBox';\n\n// labels=[[key, label], [], ...]\nconst CheckBoxForm = (props) => {\n    return (\n        <>\n            {props.labels.map(([key, label]) => (\n                <CheckBox\n                    key={key}\n                    checked={props.filter[key]}\n                    onChange={() => props.onChange(key)}\n                    value={label}\n                    label={props.labelText(key, label)}\n                />\n            ))}\n        </>\n    );\n};\n\nCheckBoxForm.defaultProps = {\n    labelText: (key, label) => label\n};\n\nCheckBoxForm.propTypes = {\n    labels: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)).isRequired,\n    onChange: PropTypes.func.isRequired,\n    labelText: PropTypes.func,\n    filter: PropTypes.objectOf(PropTypes.bool).isRequired\n};\n\nexport default CheckBoxForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst Expansion = (props) => {\n    return (\n        <ExpansionPanel>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                {props.title}\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                {props.children}\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nExpansion.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired\n};\n\nexport default Expansion;","import React from 'react';\n\nimport withWidth from '@material-ui/core/withWidth';\n\nimport Divider from '@material-ui/core/Divider';\nimport CheckBoxForm from '../Molecules/Forms/CheckBoxForm';\nimport Expansion from '../Atoms/Expansion';\n\nconst FilterArea = (props) => {\n    // ex) 完了(2) : key=complete, label=完了\n    const labelText = (key, label) => `${label}(${props.todos.filter(todo => props.todoKeys.some(todoKey => todo[todoKey] === key)).length})`;\n    const component = (\n        <div>\n            {props.todoKeys.map((todoKey, i) => (\n                <span key={todoKey}>\n                    <CheckBoxForm\n                        labels={Object.entries(props.labels[i])}\n                        labelText={labelText}\n                        filter={props.filters[i]}\n                        onChange={(filterKey) => props.handleFileters[i](filterKey)}\n                    />\n                    {i !== props.todoKeys.length - 1 && <Divider />}\n                </span>\n            ))}\n        </div>\n    );\n\n    if (props.width !== 'xs') return component;\n    return (\n        <Expansion title=\"絞り込み\">\n            {component}\n        </Expansion>\n    );\n};\n\nexport default withWidth()(FilterArea);","import React from 'react';\n\nimport useTodoState from '../hooks/useTodoState';\nimport useFilterState from '../hooks/useFilterState';\n\nimport TodoForm from './Organisms/TodoForm';\nimport TodoList from './Organisms/TodoList';\nimport FilterArea from './Organisms/FilterArea';\n\nconst App = () => {\n\n    const stateLabels = {\n        incomplete: \"未完了\",\n        complete: \"完了済み\",\n    }\n    const deadlineLabels = {\n        today: \"今日中\",\n        tomorrow: \"明日まで\",\n        week: \"一週間\",\n        other: \"未定\",\n    }\n    const priorityLabels = {\n        high: \"高い\",\n        medium: \"普通\",\n        // low: \"低い\",\n    }\n\n    const formInitial = { title: '', priority: 'medium', deadline: 'today' };\n\n    const { todos, addTodo, deleteTodo, changeTodoState, filterTodos } = useTodoState([]);\n\n    const { filter: stateFilter, handleFilter: handleStateFileter } = useFilterState(stateLabels);\n    const { filter: deadlineFilter, handleFilter: handleDeadlineFileter } = useFilterState(deadlineLabels);\n    const { filter: priorityFilter, handleFilter: handlePriorityFileter } = useFilterState(priorityLabels);\n\n    return (\n        <div>\n            <TodoForm\n                onSubmit={addTodo}\n                label=\"タスクを記入してください\"\n                placeholder=\"（例）Wantedlyフロントエンド課題\"\n                formInitial={formInitial}\n                deadlineLabels={deadlineLabels}\n                priorityLabels={priorityLabels}\n            />\n            <FilterArea\n                todos={todos}\n                labels={[stateLabels, deadlineLabels, priorityLabels]}\n                todoKeys={[\"state\", \"deadline\", \"priority\"]}\n                filters={[stateFilter, deadlineFilter, priorityFilter]}\n                handleFileters={[handleStateFileter, handleDeadlineFileter, handlePriorityFileter]}\n            />\n            <TodoList\n                todos={filterTodos([[\"state\", stateFilter], [\"deadline\", deadlineFilter], [\"priority\", priorityFilter]])}\n                deleteTodo={deleteTodo}\n                changeTodoState={changeTodoState}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}